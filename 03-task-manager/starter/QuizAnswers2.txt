1 In this lesson, you created a middleware function called asyncWrapper. Why?

We create asyncWrapper to eliminate repetitive boilerplate code, such as try/catch blocks in every asynchronous route. 
Instead, we wrap the controller in a function that automatically catches errors and passes them to next(),
so they can be handled by centralized error-handling middleware.


2.
const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(createCustomError(`No task with this id : ${taskID}`, 404));
  }
  res.status(200).json({ task });
});
